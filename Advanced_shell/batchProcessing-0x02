#!/bin/bash
# Fetch multiple Pokémon data and save each to a separate file

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_FILE="errors.txt"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

for pokemon in "${POKEMONS[@]}"; do
    echo "Fetching data for $pokemon..."
    
    # Make API request and save status code
    HTTP_STATUS=$(curl -s -o "$OUTPUT_DIR/$pokemon.json" -w "%{http_code}" "$BASE_URL/$pokemon")
    
    if [ "$HTTP_STATUS" -eq 200 ]; then
        echo "Saved data to $OUTPUT_DIR/$pokemon.json ✅"
    else
        echo "Error fetching $pokemon (HTTP $HTTP_STATUS)" >> "$ERROR_FILE"
        rm -f "$OUTPUT_DIR/$pokemon.json"  # Remove incomplete file
    fi

    # Delay to handle potential rate limits
    sleep 2
done

# Fetch multiple Pokémon data with retry logic and error handling

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_FILE="errors.txt"
MAX_RETRIES=3
SLEEP_BETWEEN_RETRIES=2
SLEEP_BETWEEN_POKEMON=2

mkdir -p "$OUTPUT_DIR"
: > "$ERROR_FILE"  # Clear error file at start

for pokemon in "${POKEMONS[@]}"; do
    echo "Fetching data for $pokemon..."
    
    attempt=1
    success=false
    
    while [ $attempt -le $MAX_RETRIES ]; do
        HTTP_STATUS=$(curl -s -o "$OUTPUT_DIR/$pokemon.json" -w "%{http_code}" "$BASE_URL/$pokemon")
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Saved data to $OUTPUT_DIR/$pokemon.json ✅"
            success=true
            break
        else
            echo "Attempt $attempt failed for $pokemon (HTTP $HTTP_STATUS)"
            sleep $SLEEP_BETWEEN_RETRIES
        fi
        
        attempt=$((attempt + 1))
    done

    if [ "$success" = false ]; then
        echo "Error: Could not fetch $pokemon after $MAX_RETRIES attempts." >> "$ERROR_FILE"
        rm -f "$OUTPUT_DIR/$pokemon.json"  # Remove incomplete file
    fi

    sleep $SLEEP_BETWEEN_POKEMON
done

